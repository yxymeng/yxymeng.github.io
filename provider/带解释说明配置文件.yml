parsers: # array
  # - reg: ^.*$ 匹配所有订阅，或  - url: https://example.com/profile.yaml 指定订阅
  - reg: ^.*$
  # 删除服务商提供的策略组和规则
    code: |
      module.exports.parse = (raw, { yaml }) => {
        const rawObj = yaml.parse(raw)
        const groups = []
        const rules = []
        return yaml.stringify({ ...rawObj, 'proxy-groups': groups, rules })
      } 

############################################################################################################################################################################
  # 建立自己的配置
    yaml:

############################################################################################################################################################################
      prepend-proxy-groups: # 建立策略组
      #一个代理规则主要由三部分组成：
      #1.应用对象，包括完整域名(DOMAIN)、域名后缀(DOMAIN-SUFFIX)、域名关键字(DOMAIN-KEYWORD)、IP地址/段(IP-CIDR)以及GEOIP；
      #2.作用的IP或者域名；
      #3.采取的规则，包括直连(DIRECT)、屏蔽(REJECT)，走某个代理组(上一步定义的PROXY、Apple等代理组)
        ###########创建“✈️ ‍起飞”分组###############
        - name: ✈️ ‍起飞 
          type: select
        ###########创建“⚡ ‍低延迟”分组###############
        - name: ⚡ ‍低延迟
          type: url-test
          url: http://www.gstatic.com/generate_204 #延迟测速地址
          interval: 300                            #延迟测试时间间隔/秒
        ###########创建“Steam”分组###############
        - name: 🎮 Steam
          type: fallback
          url: http://www.gstatic.com/generate_204 
          interval: 150
        ###########创建“负载均衡”分组###############
        - name: 🌐 负载均衡
          type: load-balance
          url: http://www.gstatic.com/generate_204 
          interval: 300
          strategy: consistent-hashing     #负载均衡独有的strategy，它有两种策略：consistent-hashing 或 round-robin；
                                           #consistent-hashing means the request of the same eTLD(aka. effective top-level domain)  will be dial on the same proxy.
                                           #round-robinmeans all the request  will be dial on the different proxy one by one.
        ###########创建“🐟 漏网之鱼 ”分组###############
        - name: 🐟 漏网之鱼 
          type: select
          proxies:
            - ✈️ ‍起飞 # 黑名单模式，意为「只有命中规则的网络流量，才使用代理」
            - DIRECT  # 白名单模式，意为「没有命中规则的网络流量，统统使用代理」
        ###########创建“💩 ‍广告”分组###############
        - name: 💩 ‍广告
          type: select
          proxies:
            - REJECT
            - DIRECT
            - ✈️ ‍起飞 
  # 策略组示例
       # - name: 分组名
         # type: select       # 手动选点   
               # url-test     # 自动选择延迟最低的节点
               # fallback     # 节点故障时自动切换下一个
               # laod-balance # 均衡使用分组内的节点
         # url: http://www.gstatic.com/generate_204 或 http://www.google.com/generate_204 # 测试地址 非select类型分组必要
         # interval: 300 # 自动测试间隔时间，单位秒 非select类型分组必要
         # tolerance: 50 # 允许的偏差，节点之间延迟差小于该值不切换 非必要
         # proxies:  
           # - 节点名称或其他分组套娃，只有DIRECT和REJECT是自带的可以直接用

############################################################################################################################################################################          
      commands:   # 向指定策略组添加订阅中的节点名，可使用正则过滤
        - proxy-groups.✈️ ‍起飞.proxies=[]proxyNames|^[^游戏]*$  # 这个可以自定义，这个正则的意思是排除节点名字有“游戏”的节点。
        - proxy-groups.⚡ ‍低延迟.proxies=[]proxyNames|^[^游戏]*$ # 这个可以自定义，这个正则的意思是排除节点名字有“游戏”的节点。
        - proxy-groups.🌐 负载均衡.proxies=[]proxyNames|^[^游戏]*$
        - proxy-groups.🎮 Steam.proxies=[]proxyNames|tr|土耳其|TurKey|tk 

        # 可为策略组添加一个DIRECT，避免机场节点无法匹配上面的正则筛选而导致配置出错。应该有其他办法避免，但是我不会。或者只能手动修改上面的正则筛选
        - proxy-groups.✈️ ‍起飞.proxies.0+⚡ ‍低延迟   # 向指定分组第一个位置添加一个 ⚡ ‍低延迟 节点名
        - proxy-groups.✈️ ‍起飞.proxies.1+🌐 负载均衡 # 向指定分组第二个位置添加一个 🌐 负载均衡 节点名
        - proxy-groups.✈️ ‍起飞.proxies.2+DIRECT      # 向指定分组第三个位置添加一个 DIRECT 节点名
        # 一些可能用到的正则过滤节点示例，使分组更细致
        # []proxyNames                           # 选中所有
        # []proxyNames|a                         # 包含a
        # []proxyNames|^(.*)(a|b)+(.*)$          # 包含a或b
        # []proxyNames|^(?=.*a)(?=.*b).*$        # 包含a和b
        # []proxyNames|^((?!b).)*a((?!b).)*$     # 包含a且不包含b
        # []proxyNames|^((?!b|c).)*a((?!b|c).)*$ # 包含a且不包含b或c
        # 更多正则教程，请看这里：https://deerchao.cn/tutorials/regex/regex.htm#top
        # 如[]proxyNames|^((?!游戏|不限流量).)*(香港|台湾|狮城|日本|韩国)((?!游戏|不限流量).)*$   意为用正则选择所有包含香港、台湾、狮城、日本、韩国且不包含游戏、不限流量的所有节点

############################################################################################################################################################################
  # 添加规则
   #目前Clash支持的规则类型如下:
    #DOMAIN-SUFFIX：域名后缀匹配
    #DOMAIN：域名匹配
    #DOMAIN-KEYWORD：域名关键字匹配
    #IP-CIDR：IP段匹配
    #SRC-IP-CIDR：源IP段匹配
    #GEOIP：GEOIP数据库（国家代码）匹配
    #DST-PORT：目标端口匹配
    #SRC-PORT：源端口匹配
    #PROCESS-NAME：源进程名匹配
    #RULE-SET：Rule Provider规则匹配
    #MATCH：全匹配
      prepend-rules: # 规则由上往下遍历，如上面规则已经命中，则不再往下处理

        - DOMAIN,clash.razord.top,DIRECT
        - DOMAIN,yacd.haishan.me,DIRECT
        #- GEOIP,,DIRECT,no-resolve     #下面有ChinaIp，比这个更强
        #- GEOIP,CN,DIRECT,no-resolve
        - RULE-SET,applications,DIRECT      
        - DOMAIN-KEYWORD,githubusercontent,✈️ ‍起飞
        - DOMAIN-KEYWORD,jsdelivr,✈️ ‍起飞    # A free CDN for open source projects www.jsdelivr.com/

        #个人需求
        - RULE-SET,MyProxies,✈️ ‍起飞 
        - RULE-SET,MyDirect,DIRECT
        - DOMAIN-SUFFIX,cm.steampowered.com,🎮 Steam    #在使用规则代理steam的时候 只需要 *.cm.steampowered.com 直连 即可自动识别国内的cdn进行下载
        - PROCESS-NAME,steam.exe,🎮 Steam
        - PROCESS-NAME,steamwebhelper.exe,🎮 Steam
        - DOMAIN-KEYWORD,steam,🎮 Steam 

        # 白名单
        - RULE-SET,UnBan,DIRECT     # Unbreak 白名单 不应该被广告链接的网站
        # 广告
        - RULE-SET,BanAD,💩 ‍广告                  #RULE-SET就是设置下面的规则集rule-providers的
        - RULE-SET,BanEasyListChina,💩 ‍广告
        - RULE-SET,BanProgramAD,💩 ‍广告

        # 游戏
        #- RULE-SET,Epic,DIRECT   包含在mydirect里了
        - RULE-SET,Steam,🎮 Steam
        - RULE-SET,SteamCN,🎮 Steam        #先代理用着，之后换好区再换回direct
        - RULE-SET,Xbox,DIRECT   #✈️ ‍起飞发现不需要，直接直连就行
        - RULE-SET,Nintendo,✈️ ‍起飞
        - RULE-SET,Origin,✈️ ‍起飞
        - RULE-SET,Sony,✈️ ‍起飞 
        # 媒体
        - RULE-SET,ChinaMedia,DIRECT
        - RULE-SET,ProxyMedia,✈️ ‍起飞 
        - RULE-SET,YouTube,✈️ ‍起飞 
        # 开发
        - RULE-SET,Developer,✈️ ‍起飞 
        # 18
        - RULE-SET,EHGallery,✈️ ‍起飞 
        - RULE-SET,Porn,✈️ ‍起飞 
        # 学术
        - RULE-SET,Scholar,✈️ ‍起飞 
        # GFW
        - RULE-SET,ProxyGFWlist,✈️ ‍起飞 
        # 国内
        - RULE-SET,ChinaCompanyIp,DIRECT
        - RULE-SET,ChinaDomain,DIRECT
        - RULE-SET,ChinaIp,DIRECT
        # 本地
        - RULE-SET,Download,DIRECT
        - RULE-SET,LocalAreaNetwork,DIRECT
        # 其他
        - RULE-SET,Adobe,✈️ ‍起飞 
        - RULE-SET,Google,✈️ ‍起飞 
        - RULE-SET,GoogleCN,DIRECT
        - RULE-SET,Microsoft,DIRECT    #暂时发现✈️ ‍起飞不需要，直接直连
        - RULE-SET,OneDrive,✈️ ‍起飞 
        - RULE-SET,Telegram,✈️ ‍起飞 

        - MATCH,🐟 漏网之鱼 # 规则之外的，专门创了个策略组“代理模式”，选PROXY的时候即为白名单模式未匹配的规则全走代理，选DIRECT则为黑名单模式，未匹配到的规则全走直连

############################################################################################################################################################################
  # 添加规则集
  #behavior：可填写 domain ipcidr classical
  #type：可填写http或file「在线文件填写http，本地文件填写file」
  #interval：更新间隔
  #path：文件储存路径
  #behavior的三种类型对应的文件内容格式分别如下：
     #domain:
       #payload:
       # - '.blogger.com'
       #- '*.*.microsoft.com'
       #- 'books.itunes.apple.com'
     #ipcidr:
       #payload:
       #- '192.168.1.0/24'
       #- '10.0.0.0.1/32'
     #classical:
       #payload:
       #- DOMAIN-SUFFIX,google.com
       #- DOMAIN-KEYWORD,google
       #- DOMAIN,ad.com
       #- SRC-IP-CIDR,192.168.1.201/32
       #- IP-CIDR,127.0.0.0/8
       #- GEOIP,CN
       #- DST-PORT,80
       #- SRC-PORT,7777
       
      mix-rule-providers: 

        MyProxies:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/yxymeng/yxymeng.github.io/master/proxy_personal.yaml"  #若更新总失败，将 raw.githubusercontent.com 替换为 raw.staticdn.net 即可，利用反代
          path: ./ruleset/MyProxies.yaml
          interval: 86400

        MyDirect:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/yxymeng/yxymeng.github.io/master/direct_personal.yaml"
          path: ./ruleset/MyDirect.yaml
          interval: 86400

        BanAD: # 本碎片只包含常见广告关键字、广告联盟。无副作用，放心使用
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/BanAD.yaml"
          path: ./ruleset/BanAD.yaml
          interval: 86400
          
        BanProgramAD: # 本碎片只包含常见广告关键字、广告联盟。无副作用，放心使用
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/BanProgramAD.yaml"
          path: ./ruleset/BanProgramAD.yaml
          interval: 86400

        Steam:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Steam.yaml"
          path: ./ruleset/Steam.yaml
          interval: 86400

        applications: # 需要直连的常见软件列表
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/yxymeng/yxymeng.github.io/master/applications_direct.yaml"
          path: ./ruleset/applications.yaml
          interval: 86400

        Adobe:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Adobe.yaml"
          path: ./ACL4SSR/Adobe.yaml
          interval: 86400

        Developer:        # 内容：Developer 开发者常用国外网站、镜像和论坛
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Developer.yaml"
          path: ./ACL4SSR/Developer.yaml
          interval: 86400

        EHGallery:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/EHGallery.yaml"
          path: ./ACL4SSR/EHGallery.yaml
          interval: 86400

        Google:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Google.yaml"
          path: ./ACL4SSR/Google.yaml
          interval: 86400
      
        GoogleCN:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/GoogleCN.yaml"
          path: ./ACL4SSR/GoogleCN.yaml
          interval: 86400

        Microsoft:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Microsoft.yaml"
          path: ./ACL4SSR/Microsoft.yaml
          interval: 86400

        Nintendo:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Nintendo.yaml"
          path: ./ACL4SSR/Nintendo.yaml
          interval: 86400

        Origin:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Origin.yaml"
          path: ./ACL4SSR/Origin.yaml
          interval: 86400

        OneDrive:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/OneDrive.yaml"
          path: ./ACL4SSR/OneDrive.yaml
          interval: 86400
    
        Porn:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Porn.yaml"
          path: ./ACL4SSR/Porn.yaml
          interval: 86400
    
        Scholar:          # 国内外学术网站
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Scholar.yaml"
          path: ./ACL4SSR/Scholar.yaml
          interval: 86400
    
        Sony:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Sony.yaml"
          path: ./ACL4SSR/Sony.yaml
          interval: 86400

        SteamCN:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/SteamCN.yaml"
          path: ./ACL4SSR/SteamCN.yaml
          interval: 86400
    
        Telegram:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Telegram.yaml"
          path: ./ACL4SSR/Telegram.yaml
          interval: 86400

        Xbox:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Xbox.yaml"
          path: ./ACL4SSR/Xbox.yaml
          interval: 86400

        YouTube:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/YouTube.yaml"
          path: ./ACL4SSR/YouTube.yaml
          interval: 86400

        BanEasyListChina:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/BanEasyListChina.yaml"
          path: ./ACL4SSR/BanEasyListChina.yaml
          interval: 86400

        ChinaCompanyIp:
          type: http
          behavior: ipcidr
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaCompanyIp.yaml"
          path: ./ACL4SSR/ChinaCompanyIp.yaml
          interval: 86400
    
        ChinaDomain:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaDomain.yaml"
          path: ./ACL4SSR/ChinaDomain.yaml
          interval: 86400
    
        ChinaIp:
          type: http
          behavior: ipcidr
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaIp.yaml"
          path: ./ACL4SSR/ChinaIp.yaml
          interval: 86400

        ChinaMedia:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaMedia.yaml"
          path: ./ACL4SSR/ChinaMedia.yaml
          interval: 86400
 
        Download:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Download.yaml"
          path: ./ACL4SSR/Download.yaml
          interval: 86400
           
        LocalAreaNetwork:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/LocalAreaNetwork.yaml"
          path: ./ACL4SSR/LocalAreaNetwork.yaml
          interval: 86400
    
        ProxyGFWlist:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ProxyGFWlist.yaml"
          path: ./ACL4SSR/ProxyGFWlist.yaml
          interval: 86400

        ProxyMedia:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ProxyMedia.yaml"
          path: ./ACL4SSR/ProxyMedia.yaml
          interval: 86400
    
        UnBan:
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/UnBan.yaml"
          path: ./ACL4SSR/UnBan.yaml
          interval: 86400 
